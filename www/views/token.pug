extends main
block content
    title Mod Bot - Token



    div(class="container-fluid")
        div(id="messages")
            if flash.error
                div(class="alert alert-danger" role="alert") #{flash.error}
            if flash.warning
                div(class="alert alert-warning" role="alert") #{flash.warning}
            if flash.success
                div(class="alert alert-success" role="alert") #{flash.success}
            if auth_error
                div(class="alert alert-warning" role="alert") #{auth_error}
        div(id="LoginDiv" class="center border border-dark" style="" ) 
            script(type="text/javascript") function toggleVisibility() { var x = document.getElementById("access_token"); if (x.type === "password") {  x.type = "text";  } else {    x.type = "password";  } }
            h4 Login as the Bot and Authorize a Token
            a(href="" id="auth_url" style="text-decoration: none;"  )
                button( class="btn rounded" style="filter: drop-shadow(1px 1px 2px black); box-shadow: inset 0 0 10px #000000; background-color: #6441a5; color: white;" )
                    strong Log In with 
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-twitch" viewBox="0 0 16 16">
                        <path d="M3.857 0 1 2.857v10.286h3.429V16l2.857-2.857H9.57L14.714 8V0H3.857zm9.714 7.429-2.285 2.285H9l-2 2v-2H4.429V1.143h9.142v6.286z"/>
                        <path d="M11.857 3.143h-1.143V6.57h1.143V3.143zm-3.143 0H7.571V6.57h1.143V3.143z"/>
                        </svg> 
                        | Twitch
            br
            br
            h6 Optional
            p  Scope settings by Default are configured for Mod-Bots current feature set (chat read/write/moderate), but here for future expansion and development.
            button(class="btn btn-dark rounded" data-bs-toggle="collapse" aria-expanded=true data-bs-target="#scopesList" aria-controls="scopesList") Custom Scopes 
            div(class="card collapse" id="scopesList" style="background-color: #353535 !important;")
                table(class="table table-striped table-hover" )

                    for grouped, group in scopes
                        tr
                            th(colspan=3 style="color:#FFFFFF;") #{group}
                        for desc, scope in grouped
                            tr
                                td #{scope}
                                td #{desc}
                                td
                                    if group.startsWith("Chat")
                                        input(type="checkbox" name=scope checked)
                                    else
                                        input(type="checkbox" name=scope)

                    tr
                        th(colspan=3 style="color:#FFFFFF;") Extra Scopes
                    tr
                        td Enable Force Verify
                        td Specifies whether the user should be re-prompted for authorization. If this is true, the user always is prompted to confirm authorization. This is useful to allow your users to switch Twitch accounts, since there is no way to log users out of the API. Default: false (a given user sees the authorization page for a given set of scopes only the first time through the sequence).
                        td
                            input(type="checkbox" name="force_verify")
        div(id="authDiv" class="center border border-dark" style="" )  
            form(id="authForm" action='token' method='post' hidden="true")
                .form-group
                    h5 Save your Token
                    label(id="access_token_label" for='access_token') Access Token
                    input.form-control.col-lg-9(id="access_token" type='password' autocomplete aria-describedby='token' name='access_token' required size="40")
                    input(type="checkbox" onClick='toggleVisibility()') 
                    | Show
                    br
                    button.btn.btn-primary(type='submit') Save Token

    script(type="text/javascript").
        document.body.addEventListener("click", (e) => {
            if (e.target.getAttribute("type") == "checkbox") {
                generate();
            }
        });
        function auth() {
            document.getElementById("authForm").hidden = true;
            document.getElementById("LoginDiv").hidden = false;
            if (document.location.hash && document.location.hash != "") {
                const parsedHash = new URLSearchParams(window.location.hash.slice(1));
                if (parsedHash.get("access_token")) {
                    var access_token = parsedHash.get("access_token");
                    document
                        .getElementById("access_token")
                        .setAttribute("value", access_token);
                    document
                        .getElementById("authForm")
                        .setAttribute("action", "token?" + parsedHash);
                    document.getElementById("LoginDiv").hidden = true;
                    document.getElementById("authForm").hidden = false;
                }
            } else if (document.location.search && document.location.search != "") {
                const parsedParams = new URLSearchParams(window.location.search);
                if (parsedParams.get("error_description")) {
                    document.getElementById("access_token").textContent =
                        parsedParams.get("error") +
                        " - " +
                        parsedParams.get("error_description");
                }
            }
        }
        auth();

        function generate() {
            var force_verify = "false";
            const scopes = [];
            let redirect_uri = `#{redirect_uri}`;
            var checks = document.getElementsByTagName("input");
            for (var x = 0; x < checks.length; x++) {
                if (checks[x].getAttribute("type") == "checkbox") {
                    if (checks[x].checked) {
                        if (checks[x].getAttribute("name") == "force_verify") {
                            force_verify = "true";
                        } else {
                            scopes.push(checks[x].getAttribute("name"));
                        }
                    }
                }
            }
            var url = `https://id.twitch.tv/oauth2/authorize?response_type=token&client_id=#{client_id}&redirect_uri=${redirect_uri}&force_verify=${force_verify}&scope=`;
            url += scopes.join("+");
            document.getElementById("auth_url").setAttribute("href", url);
        }
        generate();
